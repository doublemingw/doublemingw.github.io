<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何打造产品：从产品经理到Indiehacker </title>
      <link href="//p/1724c8e4-d6f1-8198-83ae-fe4a5623c916/"/>
      <url>//p/1724c8e4-d6f1-8198-83ae-fe4a5623c916/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>笔者拥有多年产品经理的经验，目前正在探索独立开发者（Indiehacker）的领域。希望能够充分利用已有的能力和经验，同时适应新的挑战，总结出作为Indiehacker的产品打造方法论。</p><h1 id="从产品经理到-Indiehacker"><a href="#从产品经理到-Indiehacker" class="headerlink" title="从产品经理到 Indiehacker"></a>从产品经理到 Indiehacker</h1><h2 id="产品经理视角"><a href="#产品经理视角" class="headerlink" title="产品经理视角"></a>产品经理视角</h2><p>产品经理（PM）是负责产品全生命周期管理的专业人员，主要职责包括：</p><ul><li><strong>市场调研与需求分析</strong>：通过用户访谈、问卷调查等方式，了解市场趋势和用户需求，为产品规划提供数据支持。</li><li><strong>产品规划与设计</strong>：基于市场调研结果，制定详细的产品规划，包括功能、界面设计和用户体验。</li><li><strong>项目管理与执行</strong>：制定项目计划、分配任务、监控进度，确保项目按时完成。</li><li><strong>产品推广与运营</strong>：参与产品上线后的推广策略制定和用户反馈收集，持续优化产品功能</li></ul><h2 id="Indiehacker-视角"><a href="#Indiehacker-视角" class="headerlink" title="Indiehacker 视角"></a>Indiehacker 视角</h2><p>Indiehacker是指那些独立开发并运营自己项目的创业者，通常具备以下特点：</p><ul><li><strong>自我驱动</strong>：Indiehacker通常从零开始，依靠自身资源和能力进行产品开发。</li><li><strong>快速迭代</strong>：Indiehacker倾向于采用敏捷开发方法，快速推出最小可行产品（MVP），并根据用户反馈进行迭代。</li><li><strong>多角色兼任</strong>：他们往往需要同时担任多个角色，包括开发、市场营销和客户支持等。</li><li><strong>灵活性与创新</strong>：Indiehacker更容易进行创新尝试，因为他们不受大型组织的流程限制，可以快速调整方向。</li></ul><h2 id="不同的成功要素"><a href="#不同的成功要素" class="headerlink" title="不同的成功要素"></a>不同的成功要素</h2><p><strong>对于产品经理</strong></p><ul><li><strong>沟通与协调能力</strong>：能够有效地协调各部门资源，确保项目顺利推进。</li><li><strong>数据分析能力</strong>：通过数据分析识别用户行为模式，为决策提供依据。</li><li><strong>项目管理能力</strong>：制定合理的时间表和资源分配，提高团队效率。</li></ul><p><strong>对于 Indiehacker</strong></p><ul><li><strong>自我学习能力</strong>：Indiehacker需要不断学习新技术和市场趋势，以保持竞争力。</li><li><strong>灵活应变能力</strong>：能够快速调整策略以应对市场变化和用户反馈。</li><li><strong>创新思维</strong>：鼓励尝试新想法，寻找独特的市场切入点。</li></ul><h1 id="作为产品经理，怎么打造产品"><a href="#作为产品经理，怎么打造产品" class="headerlink" title="作为产品经理，怎么打造产品"></a>作为产品经理，怎么打造产品</h1><p>作为产品经理，打造产品核心流程如下：</p><p><img src="https://raw.githubusercontent.com/doublemingw/gallery/main/images/%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E4%BA%A7%E5%93%81-%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86-cn-wm.png" alt="打造产品流程：产品经理"></p><p>说明：</p><ul><li>产品经理，作为组织一部分，主要关注：创造价值（和团队一起打造有价值产品）、传递价值（证明自己的价值）和获取价值（升职加薪等）</li><li>目标：拆解打造产品的阶段性目标，了解背景&gt;&gt;发现问题&#x2F;需求&gt;&gt;确定产品目标&gt;&gt;深入理解需求和场景&gt;&gt;设计产品方案&gt;&gt;研发产品&gt;&gt;运营产品和验证价值。</li><li>产品流程：拆解打造产品流程，需求洞察&gt;&gt;产品规划&gt;&gt;产品设计&gt;&gt;产品研发落地&gt;&gt;产品运营。<ul><li><strong>需求洞察</strong>：系统化收集和分析用户反馈、市场数据，形成对用户需求的深刻理解。</li><li><strong>产品规划</strong>：制定详细的产品路线图，包括功能优先级、时间节点和资源分配，为后续开发提供指导。</li><li><strong>产品设计</strong>：设计用户体验（UX）和用户界面（UI），确保产品在视觉和功能上都能满足用户期望。</li><li><strong>产品研发落地</strong>：与开发团队紧密合作，确保按照规划进行研发，并及时解决出现的问题。</li><li><strong>产品运营与验证价值</strong>：上线后，通过市场推广和用户反馈收集数据，验证产品是否实现预期价值，并进行持续优化。</li></ul></li></ul><h1 id="作为-Indiehacker，怎么打造产品"><a href="#作为-Indiehacker，怎么打造产品" class="headerlink" title="作为 Indiehacker，怎么打造产品"></a>作为 Indiehacker，怎么打造产品</h1><p><strong>（1）需求洞察（识别问题与市场需求）</strong></p><ul><li><strong>寻找痛点</strong>：观察周围的环境，识别用户面临的具体问题或痛点。可以通过个人经验、社交媒体或行业论坛获取灵感。</li><li><strong>市场调研</strong>：进行初步的市场调研，了解潜在用户的需求和愿意支付的价格。可以利用问卷调查、访谈等方式收集数据。</li></ul><p><strong>（2） 验证假设</strong></p><ul><li><strong>创建简单的落地页</strong>：在开发产品之前，创建一个描述产品解决方案的落地页，以收集潜在用户的电子邮件或预订信息。这有助于测试市场需求。</li><li><strong>手动服务</strong>：在构建技术产品之前，可以考虑手动提供服务，以验证想法是否可行。</li></ul><p><strong>（3） 构建最小可行产品（MVP）</strong></p><ul><li><strong>定义核心功能</strong>：确定MVP所需的基本功能，确保它能有效解决用户的主要问题。避免过度开发，保持简单。</li><li><strong>使用快速原型工具</strong>：利用无代码或低代码工具（如Bubble、Webflow）快速构建MVP，以便更快地进入市场。</li></ul><p><strong>（4） 用户反馈与迭代</strong></p><ul><li><strong>收集反馈</strong>：在MVP发布后，积极收集用户反馈。与早期用户沟通，了解他们的使用体验和改进建议。</li><li><strong>快速迭代</strong>：根据用户反馈进行快速迭代，逐步完善产品。保持灵活性，随时调整方向以满足市场需求。</li></ul><p><strong>（5） 营销与推广</strong></p><ul><li><strong>建立品牌形象</strong>：通过社交媒体、博客和内容营销等方式建立个人品牌，吸引潜在用户。</li><li><strong>利用社区资源</strong>：参与相关社区（如Indie Hackers）进行宣传，与其他开发者交流经验，获取更多曝光机会。</li></ul><p><strong>（6） 监测与改进</strong></p><ul><li><strong>跟踪关键指标</strong>：使用分析工具监测产品使用情况和用户行为，以便了解哪些功能受欢迎，哪些需要改进。</li><li><strong>持续优化</strong>：根据数据分析结果不断优化产品，提高用户满意度和留存率。</li></ul><p>总体来看，作为 indiehacker ，打造产品的流程为：</p><p><img src="https://raw.githubusercontent.com/doublemingw/gallery/main/images/%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E4%BA%A7%E5%93%81%EF%BC%9Aindiehacker-cn-wm.png" alt="打造产品流程：indiehacker"></p><ul><li>需求洞察（识别问题和市场需求）&gt;&gt;验证假设&gt;&gt;构建 MVP&gt;&gt;用户反馈与迭代&gt;&gt;营销与推广&gt;&gt;监控与改进</li></ul><h1 id="打造产品流程比较"><a href="#打造产品流程比较" class="headerlink" title="打造产品流程比较"></a>打造产品流程比较</h1><h2 id="异同点："><a href="#异同点：" class="headerlink" title="异同点："></a>异同点：</h2><p><strong>共同点</strong>：两者都强调需求洞察作为起点，并重视用户反馈与迭代过程。</p><p><strong>区别</strong>：</p><ul><li>产品经理在流程中更注重<u>系统化的规划</u>、设计以及<u>团队协作</u>，而Indiehacker则更强调<u>快速验证假设</u>、<u>构建MVP</u>和<u>灵活应变</u>。</li><li>产品经理则在<u>组织内运作</u>，有<u>更多资源</u>支持系统化开发。 Indiehacker通常在<u>资源有限</u>的情况下工作，更加依赖于快速迭代和市场反馈。</li></ul><h2 id="不同阶段的区别："><a href="#不同阶段的区别：" class="headerlink" title="不同阶段的区别："></a>不同阶段的区别：</h2><table><thead><tr><th><strong>阶段</strong></th><th><strong>产品经理</strong></th><th><strong>Indiehacker</strong></th></tr></thead><tbody><tr><td>创意生成</td><td>依赖<u>团队协作</u>与市场调研</td><td><u>个人</u>头脑风暴与灵感捕捉</td></tr><tr><td>产品定义</td><td>制定<u>详细的</u>需求文档与功能规格</td><td>快速构思并创建<u>MVP</u></td></tr><tr><td>产品设计-原型制作</td><td>与<u>设计师</u>合作制作高保真原型</td><td><u>自行设计</u>简单原型</td></tr><tr><td>开发测试</td><td>通过<u>团队协作</u>进行全面测试</td><td><u>个人</u>或小团队<u>快速迭代</u>测试</td></tr><tr><td>运营推广</td><td>制定<u>系统化</u>的市场推广策略</td><td>通过社交媒体等渠道<u>自主推广</u></td></tr><tr><td>用户反馈</td><td>收集数据并进行分析优化</td><td>直接与<u>用户沟通</u>反馈并调整</td></tr></tbody></table><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>通过复盘产品经理的经验，并梳理Indiehacker的产品打造方法，我初步掌握了从产品经理转型为Indiehacker所需的方法。无论是作为产品经理还是Indiehacker，成功的关键在于对用户需求的深刻理解。然而，Indiehacker需要更快地构建最小可行产品（MVP）、快速迭代，并灵活应对市场变化，这对能力要求更加综合。</p><p>未来，我将基于这一初步认知体系和方法论进行实际产品实践，不断打磨和完善我的产品方法论。</p>]]></content>
      
      
      <categories>
          
          <category> 做产品 </category>
          
          <category> 方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品经理 </tag>
            
            <tag> indiehacker </tag>
            
            <tag> 独立开发者 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建：搭建本地博客、部署到GitHub Pages和Cloudflare Pages</title>
      <link href="//p/hexo-setup-deploy/"/>
      <url>//p/hexo-setup-deploy/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇属于hexo博客搭建指南系列的V1.0，主要介绍了hexo本地构建到部署github pages、cloudflare  pages的过程，整个hexo博客搭建指南系列详见：<a href="https://blog.dmindie.com/p/hexo-solution-process-overview/"> hexo博客搭建指南：系统化方案与详细构建过程</a>。</p><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><ul><li>流程如下：</li></ul><p><img src="https://raw.githubusercontent.com/doublemingw/gallery/main/images/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%9A%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E3%80%81%E9%83%A8%E7%BD%B2%E5%88%B0GitHub%20Pages%E5%92%8CCloudflare%20Pages-cn-wm.png" alt="hexo 博客从本地搭建到部署整体流程"></p><p>说明：</p><ul><li>整个流程，涉及四个阶段：准备、搭建本地博客、部署到 GitHub pages、部署到 Cloudflare pages；三个模块：Hexo 本地、GitHub、Cloudflare</li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>下载安装 node.js （<a href="https://nodejs.org/en/">官网下载安装</a>）</li><li>下载安装 git （<a href="https://git-scm.com/downloads">官网下载安装</a>）</li></ul><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a><strong>注册账号</strong></h2><ul><li>注册GitHub账号</li><li>注册Cloudflare账号</li></ul><h1 id="本地搭建Hexo博客"><a href="#本地搭建Hexo博客" class="headerlink" title="本地搭建Hexo博客"></a>本地搭建Hexo博客</h1><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a><strong>初始化Hexo</strong></h2><ul><li>目标：安装 Hexo 命令行工具（CLI）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>通过这个命令，用户在全局范围内安装 Hexo CLI，使得可以在任何目录下使用 Hexo 的命令。Hexo CLI 是与 Hexo 相关的命令行工具，提供了创建、生成和部署博客所需的各种功能。</p><ul><li>目标：初始化一个新的 Hexo 博客项目。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure><p>这个命令会在当前目录下创建一个名为 myblog 的文件夹，并在其中生成一个新的 Hexo 博客项目的基本结构，包括必要的文件和目录，如 _config.yml 配置文件、source 文件夹等。这个步骤是搭建博客的基础。</p><ul><li>目标：进入刚刚创建的博客项目目录。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#若为相对路径</span></span><br><span class="line"><span class="built_in">cd</span> myblog</span><br><span class="line"><span class="comment">#若为绝对路径，若myblog 文件夹位于 /home/user 下</span></span><br><span class="line"><span class="built_in">cd</span> /home/user/myblog</span><br></pre></td></tr></table></figure><p>通过这个命令，用户切换到 myblog 文件夹，以便后续对该项目进行配置和管理。在这个目录下，用户可以执行其他 Hexo 命令来生成和管理博客内容。</p><ul><li>目标：安装项目所需的依赖包。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>在 myblog 目录中执行此命令后，npm 会根据 package.json 文件中的依赖列表下载并安装所有必要的依赖项。这些依赖通常包括 Hexo 核心库及其插件，确保博客能够正常运行和生成。</p><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><ul><li>配置网站站点信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site </span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Damon</span> <span class="string">IndieHacker</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Damon&#x27;s</span> <span class="string">Indie</span> <span class="string">Hacker</span> <span class="string">Journey</span>  </span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;欢迎来到 Damon 的独立创客之旅，探索数字游民生活、独立创业、产品开发及理财投资。&#x27;</span>   </span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&#x27;数字游民,indie hacker,独立创客,独立创业,产品开发,理财投资,&#x27;</span> </span><br><span class="line"><span class="attr">author:</span> <span class="string">Damon</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>  <span class="comment"># 默认语言（简体中文）</span></span><br></pre></td></tr></table></figure><h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a><strong>本地预览</strong></h2><ul><li>执行如下命令，启动本地服务器并访问地址localhost:4000，可以预览hexo博客，进行验证。</li></ul><h1 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h1><h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a><strong>创建GitHub仓库</strong></h2><ul><li>仓库名称格式：<code>username.github.io</code>，前缀必须为username</li><li>可见性选择：公开&#x2F;public</li></ul><h2 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a><strong>配置用户名和邮箱</strong></h2><ul><li><p>为什么要配置用户名和邮箱</p><ul><li>记录提交信息：Git会在每次提交时记录作者的用户名和邮箱。这些信息在查看提交历史时非常重要，可以帮助其他人了解代码的来源和责任。</li><li>权限管理：GitHub会根据这些信息来识别提交者。如果本地配置的邮箱与GitHub账户中注册的邮箱相同，GitHub会将该提交归属到相应的用户账户上，这样可以确保您的贡献被正确记录。</li><li>避免混淆：如果不配置用户名和邮箱，Git会使用默认值（如计算机名），这可能导致提交记录不清晰，难以追溯。</li></ul></li><li><p>全局配置</p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Default Name&quot;</span><br><span class="line">git config --global user.email &quot;default@example.com&quot;</span><br></pre></td></tr></table></figure><ul><li>Your Default Name，即填写用户名</li><li><a href="mailto:&#x64;&#x65;&#102;&#x61;&#117;&#x6c;&#x74;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#x64;&#x65;&#102;&#x61;&#117;&#x6c;&#x74;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a>，即填用户邮箱</li></ul></li><li><p>验证设置</p><ul><li><p>可以通过以下命令确认当前仓库的配置</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li><li><p>如果正常显示你配置的用户名和邮箱，则配置成功</p></li></ul></li></ul><h2 id="配置-Hexo-部署设置"><a href="#配置-Hexo-部署设置" class="headerlink" title="配置 Hexo 部署设置"></a><strong>配置 Hexo 部署设置</strong></h2><h3 id="两种部署配置方式：SSH和HTTPS"><a href="#两种部署配置方式：SSH和HTTPS" class="headerlink" title="两种部署配置方式：SSH和HTTPS"></a>两种部署配置方式：<strong>SSH</strong>和<strong>HTTPS</strong></h3><p>（1）SSH（Secure Shell）</p><ul><li>特点：<ul><li>使用SSH协议时，需要生成SSH密钥对（公钥和私钥）。</li><li>将公钥添加到GitHub账户的SSH设置中，以便进行身份验证。</li><li>一旦配置完成，使用SSH推送代码时不需要每次输入用户名和密码。</li></ul></li><li>优点：<ul><li>更加安全，因为SSH使用加密连接。</li><li>适合频繁进行代码推送的用户，因为省去了每次输入凭据的麻烦。</li></ul></li></ul><p>（2）HTTPS（Hypertext Transfer Protocol Secure）</p><ul><li>特点：<ul><li>使用HTTPS协议时，每次推送代码都需要输入GitHub账户的用户名和密码（或者使用个人访问令牌）。</li></ul></li><li>优点：<ul><li>配置相对简单，不需要管理SSH密钥。</li><li>对于不频繁推送代码的用户，HTTPS可能更方便。</li></ul></li></ul><p>（3）SSH和HTTPS对比</p><table><thead><tr><th><strong>特性\名称</strong></th><th><strong>SSH</strong></th><th><strong>HTTPS</strong></th></tr></thead><tbody><tr><td>安全性</td><td>高（加密连接）</td><td>中（依赖于密码或令牌）</td></tr><tr><td>配置复杂度</td><td>较高（需要生成和管理密钥）</td><td>较低（直接使用用户名和密码）</td></tr><tr><td>推送便利性</td><td>高（无需每次输入凭据）</td><td>较低（每次都需输入凭据）</td></tr></tbody></table><p>选择哪种方式取决于你的需求。如果你经常更新博客并希望简化流程，建议使用SSH；如果你偶尔更新且不想管理密钥，HTTPS可能更适合。由于，我经常更新博客，使用了 SSH 了方式，下面有每种方式的具体步骤。</p><h3 id="SSH配置步骤"><a href="#SSH配置步骤" class="headerlink" title="SSH配置步骤"></a><strong>SSH配置步骤</strong></h3><p><strong>（1）准备——生成SSH密钥</strong></p><p>首先，需要在本地计算机上生成一个SSH密钥对（公钥和私钥）。</p><ul><li><p><strong>打开终端</strong>：</p><ul><li>在Windows上，可以使用Git Bash或Windows Terminal。</li><li>在macOS或Linux上，直接打开终端。</li><li>本篇文章是基于 macOS 操作的。</li></ul></li><li><p><strong>输入生成密钥的命令</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><ul><li>**<code>-t rsa</code>**：指定密钥类型为RSA。</li><li>**<code>-b 4096</code>**：指定密钥长度为4096位（更安全）。</li><li>**<code>-C &quot;your_email@example.com&quot;</code>**：为密钥添加注释，通常使用您的电子邮件。</li></ul></li><li><p><strong>按提示操作</strong>：</p><ul><li>系统会提示您选择保存位置，默认是 **<code>~/.ssh/id_rsa</code>**。如果您不想更改，可以直接按回车。</li><li>接下来，系统会询问您是否设置密码。可以选择输入密码以增强安全性，也可以直接按回车跳过。</li></ul></li></ul><p><strong>（2）准备——添加SSH公钥到GitHub</strong><br>生成密钥后，需要将公钥添加到GitHub账户中。</p><ul><li><p>复制公钥：使用以下命令查看并复制公钥内容：将输出的内容复制到剪贴板中。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>进入SSH和GPG密钥设置：</p><ul><li>登录 Github，访问 <a href="https://github.com/">GitHub</a>，登录 GitHub 账户。</li><li>点击右上角的头像，然后选择“Settings”。</li><li>在左侧菜单中找到“SSH and GPG keys”，点击进入。</li></ul></li><li><p>添加新SSH密钥：</p><ul><li>点击“New SSH key”按钮。</li><li>在“Title”字段中输入一个描述性名称（例如：“Myblog SSH Key”）。</li><li>Key type，默认为：Authentication Key。</li><li>在“Key”字段中粘贴刚才复制的公钥内容。</li><li>点击“Add SSH key”按钮完成添加。</li></ul></li></ul><p><strong>（3）准备——测试SSH连接</strong></p><p>确保您的SSH配置正确，可以通过以下命令测试与GitHub的连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果一切正常，您会看到类似以下的消息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><ul><li>修改<code>_config.yml</code>文件，添加部署信息：</li><li>打开Hexo项目中的 <strong><code>_config.yml</code></strong> 文件，找到或添加 <strong><code>deploy</code></strong> 部分，并设置如下：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># 或者使用 master，取决于您的默认分支设置</span></span><br></pre></td></tr></table></figure><ul><li>将 <strong><code>username</code></strong> 替换为您的GitHub用户名。</li><li>如果您使用的是其他分支（例如 **<code>master</code>**），请相应地修改 <strong><code>branch</code></strong> 字段。</li></ul><h3 id="HTTPS配置步骤"><a href="#HTTPS配置步骤" class="headerlink" title="HTTPS配置步骤"></a><strong>HTTPS配置步骤</strong></h3><ul><li><p>打开Hexo项目中的 <strong><code>_config.yml</code></strong> 文件，找到或添加 <strong><code>deploy</code></strong> 部分，并设置如下：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># 或者使用 master，取决于您的默认分支设置</span></span><br></pre></td></tr></table></figure><ul><li>将 <strong><code>username</code></strong> 替换为您的GitHub用户名。</li><li>如果您使用的是其他分支（例如 **<code>master</code>**），请相应地修改 <strong><code>branch</code></strong> 字段。</li><li>使用这种方式，每次部署需要进行安全性验证。</li></ul></li></ul><h2 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a><strong>安装部署插件</strong></h2><ul><li>安装部署插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="执行部署到-GitHub-pages"><a href="#执行部署到-GitHub-pages" class="headerlink" title="执行部署到 GitHub pages"></a><strong>执行部署到 GitHub pages</strong></h2><ul><li>执行部署</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方案1：</span></span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br><span class="line"><span class="comment">#方案2：</span></span><br><span class="line">hexo cl;hexo g;hexo d</span><br></pre></td></tr></table></figure><ul><li>注意：若使用HTTPS配置，当系统提示您输入GitHub用户名和密码时，请输入相应的信息。如果您启用了双因素身份验证，您需要使用个人访问令牌（Personal Access Token）作为密码。</li></ul><h2 id="验证部署"><a href="#验证部署" class="headerlink" title="验证部署"></a><strong>验证部署</strong></h2><ul><li>部署完成后，您可以访问 <strong><code>https://username.github.io</code></strong> 来查看您的博客是否成功上线。</li></ul><h1 id="部署到Cloudflare-Pages"><a href="#部署到Cloudflare-Pages" class="headerlink" title="部署到Cloudflare Pages"></a>部署到Cloudflare Pages</h1><h2 id="为什么要部署-cloudflare-pages"><a href="#为什么要部署-cloudflare-pages" class="headerlink" title="为什么要部署 cloudflare pages"></a>为什么要部署 cloudflare pages</h2><p>将Hexo博客部署到GitHub Pages后，再进一步部署到Cloudflare Pages的原因主要在于性能、安全性、可用性和功能扩展等方面。</p><table><thead><tr><th><strong>比较项目</strong></th><th><strong>Cloudflare Pages</strong></th><th><strong>GitHub Pages</strong></th></tr></thead><tbody><tr><td><strong>性能</strong></td><td>全球CDN加速，快速分发静态资源</td><td>加载速度较慢，初次加载可能响应时间较长</td></tr><tr><td><strong>性能</strong></td><td>灵活的缓存策略，优化资源加载</td><td>有限的缓存机制，控制相对简单</td></tr><tr><td><strong>安全性</strong></td><td>强大的DDoS防护，保护网站稳定运行</td><td>SSL支持有限，自定义域名上配置SSL遇到限制</td></tr><tr><td><strong>安全性</strong></td><td>免费SSL&#x2F;TLS证书，确保数据传输安全</td><td>过去曾出现与安全相关的漏洞</td></tr><tr><td><strong>自动化与持续集成</strong></td><td>自动构建与部署，每次提交后自动触发</td><td>构建时间较长，高频率更新时效率低</td></tr><tr><td><strong>自动化与持续集成</strong></td><td>预览功能，方便团队协作和内容审核</td><td>缺乏灵活性，构建过程控制较少</td></tr><tr><td><strong>额外功能与分析工具</strong></td><td>内置流量分析工具，实时监控网站流量和性能</td><td>缺乏分析功能，需要依赖第三方服务获取统计信息</td></tr><tr><td><strong>额外功能与分析工具</strong></td><td>页面规则与流量管理，提供细粒度控制</td><td>对于复杂配置的网站支持有限</td></tr></tbody></table><h2 id="部署到Cloudflare-Pages步骤"><a href="#部署到Cloudflare-Pages步骤" class="headerlink" title="部署到Cloudflare Pages步骤"></a>部署到Cloudflare Pages步骤</h2><p>（1）点击创建项目</p><ul><li>在 Cloudflare 仪表盘中，找到 “Pages” 部分，然后点击 “Create a Project”。</li><li>在创建应用程序-pages页面，点击：连接到 Git</li></ul><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/4368258b-22a9-4039-ae90-1f2eee409754/19630159-2398-4d48-818c-d59b3274fedd/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250118/us-west-2/s3/aws4_request&X-Amz-Date=20250118T154737Z&X-Amz-Expires=3600&X-Amz-Signature=7ed6a8248f6840395d269f77953b991ef854e0faf083e7e7534ed1650384d52b&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image.png"></p><p>（2）授权访问 GitHub 仓库</p><ul><li>选择从 GitHub 导入项目，并授权 Cloudflare 访问你的 GitHub 仓库。</li></ul><p>（3）关联hexo 博客的仓库</p><ul><li>在列表中选择之前创建的hexo 的 GitHub仓库（即 **<code>username.github.io</code>**）。</li></ul><p>（4）配置构建设置：</p><ul><li><strong>Production Branch</strong>: 输入 **<code>main</code>**（或你使用的其他分支）</li><li><strong>Build Command（构建命令）</strong>: 默认为空</li><li><strong>Output Directory（构建输出目录）</strong>: 默认为空</li></ul><p>（5）执行部署：</p><ul><li>点击 “Save and Deploy（保存并部署）”。</li></ul><p>（6）部署结果：</p><ul><li>提示：成功！您的项目已部署到以下区域：全球</li></ul><h2 id="验证部署-1"><a href="#验证部署-1" class="headerlink" title="验证部署"></a>验证部署</h2><ul><li>可以通过 Cloudflare 提供的域名来访问博客。</li><li>验证都可以，也可以将<code>username.github.io</code>的GitHub仓库设置为<code>Private</code>私库了</li></ul><h1 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h1><ul><li>hexo 日常使用，包括：新建 page、新建 post、预览、部署等命令如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新建post</span></span><br><span class="line">hexo new 博客文章标题</span><br><span class="line"></span><br><span class="line"><span class="comment">#新建page，独立页面</span></span><br><span class="line">hexo new page --path about/me <span class="string">&quot;关于&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或hexo clean，清空静态网页 cache</span></span><br><span class="line">hexo cl</span><br><span class="line"></span><br><span class="line"><span class="comment">#或 hexo server，本地部署测试</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment">#或 hexo generate，根据源文件生成静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment">#或 hexo deploy，发布推送到 GitHub Pages</span></span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line"><span class="comment">#组合命令，博客本地快速预览</span></span><br><span class="line">hexo cl;hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment">#组合命令，博客快速部署；</span></span><br><span class="line">hexo cl;hexo g;hexo d</span><br></pre></td></tr></table></figure><ul><li>更多内容，详见：<a href="https://hexo.io/zh-cn/docs/commands">hexo-文档-指令</a></li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ul><li>虽然看起来比较复杂，但是真正操作起来也是比较顺利的，最终你也可以搭建并部署自己的 hexo 博客。</li><li>后续会继续更新 hexo 博客相关内容，包括：hexo 博客域名解析、hexo 和 notion 内容同步、hexo 主题配置、多语言切换等，请持续关注hexo 博客搭建系列：<a href="https://blog.dmindie.com/p/hexo-solution-process-overview/">Hexo博客搭建指南：系统化方案与详细构建过程</a>。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://hexo.io/zh-cn/">hexo.io</a></li><li><a href="https://github.com/hexojs/hexo">GitHub：hexo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 做产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> build in public </tag>
            
            <tag> 博客 </tag>
            
            <tag> github </tag>
            
            <tag> cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建指南：系统化方案与详细构建过程</title>
      <link href="//p/hexo-solution-process-overview/"/>
      <url>//p/hexo-solution-process-overview/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在当今数字时代，搭建一个高效、个性化的博客已成为许多内容创作者和开发者的目标。本篇文章旨在从全局视角介绍博客的整体方案，涵盖从内容管理到线上部署的各个层面。我们将详细探讨如何利用Notion进行内容整理，通过eLog实现与Hexo的同步，并最终将博客部署到GitHub Pages和Cloudflare Pages。此外，文章还将提供未来的产品路线图，展示博客的迭代优化过程和功能扩展。</p><h2 id="产品架构"><a href="#产品架构" class="headerlink" title="产品架构"></a>产品架构</h2><p><img src="https://raw.githubusercontent.com/doublemingw/gallery/main/images/hexo%E5%8D%9A%E5%AE%A2%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84-cn-2-wm.png" alt="产品架构"></p><p>说明：</p><ul><li>总共分成四个层次，notion 笔记层、hexo 博客本地管理层、线上部署层、用户感知层</li><li>noiton笔记层，利用noiton的强大能力，整理和输出内容<ul><li>elog，一键将notion内容同步到hexo本地博客管理</li></ul></li><li>hexo 博客本地管理层，进行博客自定义管理</li><li>线上部署层，将博客先挂载到github pages，再挂载到cloudflare pages</li><li>用户感知层，用户访问网站地址获取内容</li><li>多语言管理：<ul><li>两个独立的中英文博客项目</li><li>前端JavaScript+cloudflare worker实现语言切换</li></ul></li></ul><h2 id="产品路线图"><a href="#产品路线图" class="headerlink" title="产品路线图"></a>产品路线图</h2><table><thead><tr><th><strong>版本号</strong></th><th><strong>目标</strong></th><th><strong>相关博文</strong></th></tr></thead><tbody><tr><td>V1.0</td><td>从0到1，本地搭建和线上部署</td><td>1.<a href="https://blog.dmindie.com/p/hexo-local-github-cloudflare/">Hexo博客搭建：搭建本地博客、部署到GitHub Pages和Cloudflare Pages</a></td></tr><tr><td>V1.1</td><td>从0 到 1， 实现 notion 内容同步到hexo 博客</td><td>1.Hexo博客搭建：通过Elog将Notion内容同步到Hexo博客（待发布）</td></tr><tr><td>V1.2</td><td>从 0 到 1，购买、解析域名</td><td>1.Hexo博客搭建：Namecheap域名购买与Cloudflare解析指南（待发布）</td></tr><tr><td>V1.3</td><td>新增 butterfly 主题配置</td><td>1.Hexo博客搭建：butterfly主题配置（待发布）</td></tr><tr><td>V1.4</td><td>新增支持多语言切换</td><td>1.Hexo博客搭建：支持多语言切换（待发布）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 做产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> build in public </tag>
            
            <tag> 博客 </tag>
            
            <tag> github </tag>
            
            <tag> cloudflare </tag>
            
            <tag> notion </tag>
            
            <tag> hexo </tag>
            
            <tag> Elog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启Indie Hacker之旅</title>
      <link href="//p/start-indie-hacker-journey/"/>
      <url>//p/start-indie-hacker-journey/</url>
      
        <content type="html"><![CDATA[<h2 id="Indie-Hacker是什么"><a href="#Indie-Hacker是什么" class="headerlink" title="Indie Hacker是什么"></a>Indie Hacker是什么</h2><p>indie hacker，指的是那些通过构建在线项目获得收入的人，他们通常追求财务独立、创意自由和灵活的工作时间。这个群体不仅限于个人，也包括小团队。 另外，indie hacker也是一种体现独立、自力更生和创新精神的创业理念。</p><p>indie hacker与传统企业家有着明显的区别：</p><ul><li>独立性：indie hacker以独立的方式运作，通常作为单人创始人或小团队，承担多个角色。</li><li>盈利导向：与许多优先考虑增长而非即时利润的初创公司不同，indie hacker旨在从一开始就建立可持续的业务。他们通常自筹资金，通过个人储蓄或从产品中产生的收入来资助运营。</li><li>精益方法论：indie hacker采用敏捷开发实践，专注于创建最小可行产品（MVP），以便根据用户反馈进行快速迭代。</li><li>创造自由：这种方法使indie hacker能够探索创新想法，而不受投资者或企业结构施加的限制。他们重视在追求自己热爱的项目时保持健康的工作与生活平衡。</li></ul><p>与传统职场人不同，indie hacker一般有着丰富的收入来源：</p><ul><li>软件即服务(SaaS)：许多indie hackers通过开发和销售SaaS产品获得收入。这些产品通常采用订阅模式，为用户提供持续的价值，同时为开发者带来经常性收入。</li><li>一次性购买的产品：一些Iindie hackers选择开发单次付费的产品或应用，如软件工具、电子书或在线课程。</li><li>咨询和辅导服务：利用自身专业知识提供咨询或辅导服务也是一种常见的收入来源。</li><li>内容创作：通过博客、播客、电子书或在线课程等形式创作内容并实现变现。</li><li>自由职业：许多indie hackers通过在平台如Upwork上提供自由职业服务来获得收入，同时开发自己的产品。</li><li>电子商务：在Etsy等电商平台上销售手工制品、定制商品或创意产品。</li><li>B2B产品和服务：针对企业客户开发的B2B解决方案通常能带来更高的收入。</li><li>理财投资：如果通过小规模独立运作获得稳定收入，理财投资则可以帮助实现财富增值。它不仅让indie hacker享受大平台的红利，还能利用复利效应，为未来生活提供更多保障和自由。</li></ul><p>然而，做indie hacker一点也不容易，时刻面对各种挑战。</p><ul><li>面对不确定性：创业本身就是一个充满不确定性的过程，而作为独立黑客，这种不确定性更为明显。从市场需求到用户反馈，每一个决策都可能影响到产品的成败。许多独立黑客在面对这些不确定性时，会感到迷茫和焦虑。他们需要不断调整策略，以适应变化莫测的市场环境，这不仅考验着他们的应变能力，也考验着他们的心理承受能力。</li><li>难以挖掘需求：找到真正的市场需求往往是创业初期的一大难题。</li><li>难以出现成果：许多独立黑客在创业初期经历了长时间的努力，却未能看到显著的成果。虽然有些人能够迅速实现盈利，但大多数人则需要经过漫长的摸索与尝试才能找到适合自己的市场定位和产品。这种缺乏即时反馈和成果的状态，容易让人感到挫败，甚至可能导致放弃的念头。</li><li>孤独感：独立黑客的生活往往是孤独的。虽然网络上有许多支持社区，如Indie Hackers平台，但在实际操作中，许多决策和任务仍需个人独自完成。这种孤立感不仅影响了心理健康，还可能导致对工作的热情减退。在与他人分享进展时，往往会面临不被理解或支持的情况，这进一步加剧了孤独感。</li><li>难以坚持：作为一名独立黑客，最初的激情和动力可能会在面对持续的挑战时逐渐消退。许多人在创业初期充满热情，然而，随着时间的推移，面对日常工作中的各种困难，保持这种热情变得愈加困难。孤独感常常伴随左右，因为独立黑客往往是单打独斗，缺乏团队支持。在这样的环境中，孤独和压力可能会导致焦虑和沮丧，使得坚持下去变得更加艰难。</li></ul><h2 id="为什么做Indie-Hacker"><a href="#为什么做Indie-Hacker" class="headerlink" title="为什么做Indie Hacker"></a>为什么做Indie Hacker</h2><h3 id="外部环境的变化"><a href="#外部环境的变化" class="headerlink" title="外部环境的变化"></a>外部环境的变化</h3><ul><li>AI时代的机遇：随着人工智能的迅猛发展，创业机会层出不穷，甚至不亚于互联网时代。AI不仅提升了生产力，还为创业者提供了更多工具和资源，使得创业变得更加容易和高效。</li><li>个体赋能：AI技术使普通个体或小团队能够利用先进工具，完成过去需要大量的专业人才才能完成的任务。这种赋能让没有编程经验的人也能快速构建产品，降低了进入门槛。</li><li>经济环境的挑战：在当前经济下行的大环境中，需要从当前的圈子跳出，放眼全球寻找新的机会。作为一种轻资产线上业务模式，indie hacker能够有效实现全球赚取收入。</li></ul><h3 id="个人背景和动机"><a href="#个人背景和动机" class="headerlink" title="个人背景和动机"></a>个人背景和动机</h3><ul><li>个人经历：作为曾经的互联网产品经理，一方面具有完善的产品方法论体系，另一方面在电商和金融支付等领域积累了丰富经验，这些都为我成为成功的indie hacker打下了坚实基础。</li><li>性格特质：强烈的自驱力和坚持不懈的韧性。</li><li>职业规划：长期以来，我希望能够独立做一些“小而美”的事情，成为自己事业的主人。</li></ul><p>总之，indie hacker的独立的轻资产线上业务模式，为每个希望拥有自己事业的人提供了宝贵机会。我将紧紧把握这一时代赋予我们的机遇，努力实现自己的梦想💪🏻💪🏻。 </p><h2 id="怎么做Indie-Hacker"><a href="#怎么做Indie-Hacker" class="headerlink" title="怎么做Indie Hacker"></a>怎么做Indie Hacker</h2><p>在对indie hacker的认知尚浅的情况下，我意识到在快速变化的互联网和AI时代，立即启动是至关重要的。我需要迅速搭建自己的最小可行产品（MVP），甚至可以先做一个“垃圾”产品，通过实践不断优化。因此，我确定了开启indie hacker之旅的第一步。</p><p><strong>目标：</strong></p><ul><li>大量输入提升认知</li><li>快速启动MVP<ul><li>MVP，以明确认知能力做的最小产品，即个人博客</li></ul></li><li>自媒体建设</li></ul><p><strong>范围：</strong></p><ul><li>大量输入：通过输入indie hacker相关领域的内容，建立整体认知，例如：优秀的indie hacker案例、相关论坛、成功项目和产品，以及网络营销方法等。</li><li>搭建个人博客：一方面记录和构建indie hacker领域的知识体系，另一方面实现个人博客产品的MVP建设，为未来通过谷歌广告变现做好准备。</li><li>构建自媒体：自媒体是indie hacker进行营销的重要手段，有助于扩大影响力和获取用户反馈。</li></ul>]]></content>
      
      
      <categories>
          
          <category> indiehacker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 独立开发者 </tag>
            
            <tag> 挖掘需求 </tag>
            
            <tag> 产品推广 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
